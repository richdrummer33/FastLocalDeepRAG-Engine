{"docstore/metadata": {"ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae": {"doc_hash": "b3181f9296e29ec1b43ebef46392356c7fd198adbf454dc28d4db2da24ce57c3"}, "3ea911bf-3783-4e24-acf9-7d4dfa83d011": {"doc_hash": "fb0821f76c3121216150104062017d2a37527facff77cf27ea5581defdf50e77"}, "44da00bf-d560-429e-944f-ae8f87f92a53": {"doc_hash": "50a912f6ee9a00140b2a3c990b07348df485e129f67e8217d1e6097f7f3d5480"}, "ee49b365-740e-4146-bb70-2b24c2940504": {"doc_hash": "921dfc40e133b49e760f80bd45726b641a01380b354c76dc94d6afecea82b642"}, "9a24d2f6-8cb1-42d9-88ba-1ccb189974d1": {"doc_hash": "0803de709fb0f97527dbdb53116d5941d2deff324fd8eec2c2cfb9d563d26ad6"}, "05be7642-8e73-45d4-a730-ce1704e3a643": {"doc_hash": "a520e8fa932d155df4fa6ab8c59e468e654aea085448db0c3b1071628bda7ed9"}, "852d1c1c-3fb3-4d06-b6c4-cf4cb05188f0": {"doc_hash": "8f2e0ce28a0e8473004935be85dace30573ecfef0878c19b05d24476843e42a0"}, "fec03cde-2228-4b58-98b6-9570f6fec4af": {"doc_hash": "e71c66ada230d6c54aa3b8a08e187743f2df8dbc62118996b37c0f31a9acdac5"}, "f41b6859-b179-4f17-bb2a-1c27038accb8": {"doc_hash": "c62d5fc1c7beb2b11b18bad917ee0654c765862ba1cea65b42cb887ea6ee1cdb"}, "8344f830-a280-4a0a-8f85-3abb7a60c76c": {"doc_hash": "0bf8086a6cc832dda9b8403bad531c3335cd68b39b9ab3f5873149e6304c42c0", "ref_doc_id": "ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae"}, "852c31fd-bbba-4d35-a0a0-932d2422a09c": {"doc_hash": "53c551a86c1080c068cfb641323b881cb8a99103a486ce2c20177814cc4458d0", "ref_doc_id": "ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae"}, "12833706-ef4d-49af-805b-5777d0276247": {"doc_hash": "e81f582941215622831a4a9edec48a0a4ea4cb55052e4bea7cc06a3ef4acfa24", "ref_doc_id": "3ea911bf-3783-4e24-acf9-7d4dfa83d011"}, "5c04af5c-b9b0-43c4-806f-2dc541998bbd": {"doc_hash": "83958a449e24057179f8a1bba68769ce34488af3878e6e36c0fbead9a8c36246", "ref_doc_id": "44da00bf-d560-429e-944f-ae8f87f92a53"}, "53e4ddd5-9c95-4534-99d8-ae4bffca0574": {"doc_hash": "5f2017f4b0e6361a94761fc0aee11f8d6f1af0fe098e2b6eaef9032e293d4bf5", "ref_doc_id": "ee49b365-740e-4146-bb70-2b24c2940504"}, "46983ecc-8875-4a14-9863-2bd5351b77eb": {"doc_hash": "9191d8a63636a1d0dadaa1a0c8054702c99ece6112537c76a7490f329036d1c2", "ref_doc_id": "ee49b365-740e-4146-bb70-2b24c2940504"}, "0ad3a09e-f390-4ac4-8b66-9412e33d75e5": {"doc_hash": "ee798765d3535c4367b1daf68d54fe279867caa76522929965addece89daa42d", "ref_doc_id": "ee49b365-740e-4146-bb70-2b24c2940504"}, "aa70164b-2b61-44c9-adbf-ba023ba16ccb": {"doc_hash": "0803de709fb0f97527dbdb53116d5941d2deff324fd8eec2c2cfb9d563d26ad6", "ref_doc_id": "9a24d2f6-8cb1-42d9-88ba-1ccb189974d1"}, "74babccf-34db-459c-9911-dc06eb093a6c": {"doc_hash": "a520e8fa932d155df4fa6ab8c59e468e654aea085448db0c3b1071628bda7ed9", "ref_doc_id": "05be7642-8e73-45d4-a730-ce1704e3a643"}, "7108a8c8-982b-4269-ab9c-ab81bb1c49e4": {"doc_hash": "a1df9604cb3bd69903025970604a4118ca3a98c81f0910040c9dd1a9c738b82c", "ref_doc_id": "852d1c1c-3fb3-4d06-b6c4-cf4cb05188f0"}, "a7951cd7-6bde-4813-8b3b-4891adcec9cb": {"doc_hash": "e71c66ada230d6c54aa3b8a08e187743f2df8dbc62118996b37c0f31a9acdac5", "ref_doc_id": "fec03cde-2228-4b58-98b6-9570f6fec4af"}, "ea9caa70-eff0-42fb-a701-423df347f8ca": {"doc_hash": "c62d5fc1c7beb2b11b18bad917ee0654c765862ba1cea65b42cb887ea6ee1cdb", "ref_doc_id": "f41b6859-b179-4f17-bb2a-1c27038accb8"}, "a8230235-c531-421e-ac2b-738ec7a592f5": {"doc_hash": "2888773f51fd4950d702b5f03ec05b6d5e2cb449112ffd0ab869f68f83250fdb", "ref_doc_id": "ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae"}, "fb99377d-3b25-4c8b-9cb4-6c18c8c9d14d": {"doc_hash": "b214a125169bd73bb52825167786f3117330a7c181ca149f142f241af08a3872", "ref_doc_id": "3ea911bf-3783-4e24-acf9-7d4dfa83d011"}, "0c7d0780-a0d4-4447-9040-a9a9c650be40": {"doc_hash": "29f468a1731f50e940da8d892313675bf1bb3f1f15419cba2af5241f27bc1ed6", "ref_doc_id": "44da00bf-d560-429e-944f-ae8f87f92a53"}, "5f54d13f-d3bd-4f64-af39-34184bbc68fd": {"doc_hash": "d660156a50464b8f8df17a45739ed81d4680e7274e06cf2b8b6587cdea4c4b32", "ref_doc_id": "ee49b365-740e-4146-bb70-2b24c2940504"}, "2e0d65dd-558c-4659-a933-4318f9409c39": {"doc_hash": "bf67e5639c810db6ca30d462aa6f67d86955e512e0d7f0bd57fcde2c4d05bfd8", "ref_doc_id": "9a24d2f6-8cb1-42d9-88ba-1ccb189974d1"}, "1bf5f82a-f89d-47ab-8153-df709c80d5be": {"doc_hash": "b44921f45829b1ce030847b5ce76b96e500143d2b2edcb4255b0c82d6d02fba0", "ref_doc_id": "05be7642-8e73-45d4-a730-ce1704e3a643"}, "48d252d7-4404-4d6a-bf9a-9cdb81055101": {"doc_hash": "6e61cbdecaaa4b1a65ce1b10ffe7fe542293df78e217a9f4f2a1347d1509488d", "ref_doc_id": "852d1c1c-3fb3-4d06-b6c4-cf4cb05188f0"}, "379848e3-27af-4de6-b2f7-6a3e4d6d7cb1": {"doc_hash": "207efcf77d80b70e8c45277e3a52e95585544bfa5546081664e74b5d1dcae308", "ref_doc_id": "fec03cde-2228-4b58-98b6-9570f6fec4af"}, "0cdb1911-1474-43b3-8e55-d9386b503712": {"doc_hash": "d32259460955d899f2e9b796efaecbf30c7222488e145c4d7f87ca3e11e76cba", "ref_doc_id": "f41b6859-b179-4f17-bb2a-1c27038accb8"}}, "docstore/data": {"8344f830-a280-4a0a-8f85-3abb7a60c76c": {"__data__": {"id_": "8344f830-a280-4a0a-8f85-3abb7a60c76c", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "hash": "b3181f9296e29ec1b43ebef46392356c7fd198adbf454dc28d4db2da24ce57c3"}, "3": {"node_id": "852c31fd-bbba-4d35-a0a0-932d2422a09c", "node_type": "1", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "hash": "53c551a86c1080c068cfb641323b881cb8a99103a486ce2c20177814cc4458d0"}}, "hash": "0bf8086a6cc832dda9b8403bad531c3335cd68b39b9ab3f5873149e6304c42c0", "text": "using System.Collections;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing UnityEngine;\nusing UnityStandardAssets.CrossPlatformInput;\n\n// Controls the maze movement (using transform and not rigidbody) \npublic class AnimCurveRotate : MonoBehaviour\n{\n    public float rotSpeed = 5f; // rotation speed (degrees per second)\n    public float lerpTime = 5f; // how long to reach rotSpeed \n    public AnimationCurve smoothingCurve; // defines *how* the speed increases between 0 seconds and lerpTime, when pressing button (defined in inspector)\n\n    float rotSpeedScale = 0f; // scales the instantaneous speed (for smoothly ramping speed)\n    float rotDirection = 1f;\n\n    //keeps track of maximum 30 degree rotation both axis'\n    float rotationX;\n    float rotationY;\n\n    //Coroutines used to tilt the table. Treated as objects to know which ones are active\n    Coroutine down, up, left, right;\n\n    public Quaternion originalRotationValue; // declare this as a Quaternion\n\n    [SerializeField]\n    private Puzzle8Controller _puzzle8Controller;\n\n    //use bools to keep track of buttons currently pressed\n    void Start()\n    {\n        rotationX = transform.rotation.x;\n        rotationY = transform.rotation.y;\n        originalRotationValue = Quaternion.Euler(0, 0, 0); // save the initial rotation\n    }\n\n\n    //Key entry from keypad checks if button is already pressed before enabling/disabling boolean\n    public void KeyEntry(string text)\n    {\n        Debug.Log(\"Text: \" + text);\n        //Checks if 2 buttons on the same axis' are being concurrently pressed\n        if ((down != null & text == \"^\") || (up != null & text == \"v\") || (left != null & text == \">\") || (right != null & text == \"<\"))\n        {\n            Debug.Log(\"Two buttons on the same axis are pressed at the same time\");\n            return;\n        }\n        if (text == \"v\")\n        {\n            Debug.Log(\"Tilting down\");\n            down = StartCoroutine(TiltDown());\n        }\n        else if (text == \"^\")\n        {\n            Debug.Log(\"Tilting up\");\n            up = StartCoroutine(TiltUp());\n        }\n        else if (text == \">\")\n        {\n            right = StartCoroutine(TiltRight());\n        }\n        else if (text == \"<\")\n        {\n            left = StartCoroutine(TiltLeft());\n        }\n        else if (text == \"!v\")\n        {\n            if(down != null) \n                StopCoroutine(down);\n            down = null;\n        }\n        else if (text == \"!^\")\n        {\n            Debug.Log(\"Stopping coroutine Tilting up\");\n            if(up !=  null)\n                StopCoroutine(up);\n            up = null;\n        }\n        else if (text == \"!>\")\n        {\n            if(right != null)\n                StopCoroutine(right);\n            right = null;\n        }\n        else if (text == \"!<\")\n        {\n            if (left != null)\n                StopCoroutine(left);\n            left = null;\n        }\n        else if (text == \"O\")\n        {\n            ResetBoard();\n            BallMachine.Instance.ResetBallIfExist();\n        }\n    }\n\n    #region Debug (RB)\n\n    // Same calls as KeyEntry(string text), but runs the calls on keydown and key\n    void FixedUpdate()\n    {\n        // Stop all coroutines on press anything\n        if (Input.anyKeyDown)\n            StopAllCoroutines();\n\n        // Rotations \n        if (Input.GetKeyDown(KeyCode.Keypad5)) // Tilt down\n            down = StartCoroutine(TiltDown());\n        else if (Input.GetKeyDown(KeyCode.Keypad8)) // Tilt up\n            up = StartCoroutine(TiltUp());\n        else if (Input.GetKeyDown(KeyCode.Keypad6)) // Tilt right\n            right = StartCoroutine(TiltRight());\n        else if (Input.GetKeyDown(KeyCode.Keypad4)) // Tilt left\n            left = StartCoroutine(TiltLeft());\n\n        // Reset\n        else if (Input.GetKeyDown(KeyCode.KeypadMinus)) // Reset board\n            ResetBoard();\n    }\n\n    #endregion\n\n    public void ResetBoard()\n    {\n        // reset position of ball and maze\n        rotationX = 0;\n        rotationY = 0;\n        transform.rotation = Quaternion.Slerp(transform.rotation, originalRotationValue, Time.time * 1.0f);\n    }\n\n    IEnumerator TiltDown()\n    {\n        while (true)\n        {\n            if (rotationX <= 30)\n            {\n                rotationX += 10f * Time.deltaTime;\n                transform.RotateAround(transform.position, new Vector3(1f, 0f, 0f), 10f * Time.deltaTime);\n            }\n            yield return null;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "852c31fd-bbba-4d35-a0a0-932d2422a09c": {"__data__": {"id_": "852c31fd-bbba-4d35-a0a0-932d2422a09c", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "hash": "b3181f9296e29ec1b43ebef46392356c7fd198adbf454dc28d4db2da24ce57c3"}, "2": {"node_id": "8344f830-a280-4a0a-8f85-3abb7a60c76c", "node_type": "1", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "hash": "0bf8086a6cc832dda9b8403bad531c3335cd68b39b9ab3f5873149e6304c42c0"}}, "hash": "53c551a86c1080c068cfb641323b881cb8a99103a486ce2c20177814cc4458d0", "text": "}\n    }\n    IEnumerator TiltUp()\n    {\n        while (true)\n        {\n            if (rotationX >= -30)\n            {\n                rotationX -= 10f * Time.deltaTime;\n                transform.RotateAround(transform.position, new Vector3(1f, 0f, 0f), -10f * Time.deltaTime);\n            }\n            yield return null;\n        }\n    }\n    IEnumerator TiltRight()\n    {\n        while (true)\n        {\n            if (rotationY <= 30)\n            {\n                rotationY += 10f * Time.deltaTime;\n                transform.RotateAround(transform.position, new Vector3(0f, 0f, 1f), 10f * Time.deltaTime);\n            }\n            yield return null;\n        }\n    }\n    IEnumerator TiltLeft()\n    {\n        while (true)\n        {\n            if (rotationY >= -30)\n            {\n                rotationY -= 10f * Time.deltaTime;\n                transform.RotateAround(transform.position, new Vector3(0f, 0f, 1f), -10f * Time.deltaTime);\n            }\n            yield return null;\n        }\n    }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "12833706-ef4d-49af-805b-5777d0276247": {"__data__": {"id_": "12833706-ef4d-49af-805b-5777d0276247", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\CauseBallHole.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3ea911bf-3783-4e24-acf9-7d4dfa83d011", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\CauseBallHole.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "hash": "fb0821f76c3121216150104062017d2a37527facff77cf27ea5581defdf50e77"}}, "hash": "e81f582941215622831a4a9edec48a0a4ea4cb55052e4bea7cc06a3ef4acfa24", "text": "\ufeffusing System.Collections;\nusing System;\nusing System.Globalization;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing UnityEngine.UI;\nusing UnityEngine;\nusing TMPro;\n\n// RB edited so it simply provides the area for the ball to determine   \npublic class CauseBallHole : MonoBehaviour\n{\n    public BallMachine.CauseArea CauseArea;\n\n    // Detects ball collision\n\n    // RB commented out -- CauseBall checks trigger col now\n    // private void OnTriggerEnter(Collider other) {\n    //     CauseBall causeBall = other.gameObject.GetComponent<CauseBall>();\n    // \n    //     if (other.CompareTag((\"TiltBoardBall\")) && causeBall.CauseArea == CauseArea && !causeBall.IsInHole) {\n    //         causeBall.IsInHole = true;\n    //         AudioManager.Instance.Play(\"ball in hole\");\n    //         Puzzle8Controller.Instance.BallMachine.OnBallInHoleCompleted.Invoke();\n    //     }\n    // }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5c04af5c-b9b0-43c4-806f-2dc541998bbd": {"__data__": {"id_": "5c04af5c-b9b0-43c4-806f-2dc541998bbd", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\KeyPressTilt.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "44da00bf-d560-429e-944f-ae8f87f92a53", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\KeyPressTilt.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}, "hash": "50a912f6ee9a00140b2a3c990b07348df485e129f67e8217d1e6097f7f3d5480"}}, "hash": "83958a449e24057179f8a1bba68769ce34488af3878e6e36c0fbead9a8c36246", "text": "\ufeffusing System.Collections;\nusing UnityEngine.UI;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing UnityEngine;\n\n// Trigger area that synchronizes and sends the key inputs\npublic class KeyPressTilt : MonoBehaviourPun\n{\n\n    private void OnTriggerEnter(Collider other)\n    {\n        var key = other.GetComponentInChildren<Text>();\n        \n        if (key != null)\n        {\n            if (key.text != null && key.text.Length == 1) \n            {\n                // RB commented out\n                //Puzzle8Controller.Instance.MazeRotator.KeyEntry(key.text);\n                \n                //maze.GetComponent<PhotonView>().RPC(\"KeyEntry\", RpcTarget.All, key.text);\n                //PhotonView pv = GetComponent<PhotonView>();\n                //pv.RPC(\"enterKeyServer\", RpcTarget.All, key.text);\n                \n                // RB made only master\n                _photonView.RPC(\"UpdateMazeInput\", RpcTarget.MasterClient, key.text);\n            }\n        }\n\n    }\n\n    void OnTriggerExit(Collider other)\n    {\n        var key = other.GetComponentInChildren<Text>();\n\n        if (key != null)\n        {\n            if (key.text != null && key.text.Length == 1)\n            {\n                // RB commented out\n                // Puzzle8Controller.Instance.MazeRotator.KeyEntry(key.text);\n\n                // RB made only master\n                _photonView.RPC(\"UpdateMazeInput\", RpcTarget.MasterClient, key.text);\n            }\n        }\n    }\n\n    [PunRPC]\n    private void UpdateMazeInput(string key) \n    {\n        Puzzle8Controller.Instance.MazeRotator.KeyEntry(key);\n    }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "53e4ddd5-9c95-4534-99d8-ae4bffca0574": {"__data__": {"id_": "53e4ddd5-9c95-4534-99d8-ae4bffca0574", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee49b365-740e-4146-bb70-2b24c2940504", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "921dfc40e133b49e760f80bd45726b641a01380b354c76dc94d6afecea82b642"}, "3": {"node_id": "46983ecc-8875-4a14-9863-2bd5351b77eb", "node_type": "1", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "9191d8a63636a1d0dadaa1a0c8054702c99ece6112537c76a7490f329036d1c2"}}, "hash": "5f2017f4b0e6361a94761fc0aee11f8d6f1af0fe098e2b6eaef9032e293d4bf5", "text": "\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing TMPro;\nusing Unity.Collections;\nusing UnityEngine;\nusing UnityEngine.Events;\nusing UnityEngine.XR.Interaction.Toolkit;\n\n// Ball machine manager, contains the balls and sockets.\n// Reference: https://chat.openai.com/share/36789da8-129b-49f2-9f80-4c903df1e316\npublic class BallMachine : MonoBehaviourPun, IPuzzleDebug\n{\n    #region Fields\n\n    // Singleton instance.\n    private static BallMachine instance;\n    public static BallMachine Instance\n    {\n        get\n        {\n            if (instance == null)\n                instance = FindObjectOfType<BallMachine>();\n\n            return instance;\n        }\n    }\n\n    [SerializeField] GameObject _causeBallPrefab_resource;\n    [SerializeField] List<CauseBallData> _causeBallData;\n\n    // Refss\n    [Header(\"Machine\")]\n    [SerializeField] TextMeshProUGUI _ballDisplay;\n    [SerializeField] Transform _spawnPoint;\n\n    [SerializeField] GameObject _filledGumballs;\n    [SerializeField] GameObject _bucket;\n    [SerializeField] GameObject _key;\n\n    [SerializeField] GameObject enHoles, frHoles;\n\n    // Sockets\n    [Header(\"Sockets\")]\n    [SerializeField] CustomXRSocket _coinSocket;\n    [SerializeField] CustomXRSocket _bucketSocket;\n\n    [Header(\"Info (read only)\")]\n    [SerializeField] private CauseBall _currentBall;\n    [Space(10)]\n\n    // Debugging\n    [SerializeField] bool debug;\n\n    // Private parts\n    private Queue<CauseBallData> _causeBallQueue;\n    private bool _coinAdded, _bucketAdded;\n    bool _language => MainScreenManager.lang;\n    public enum CauseArea { Provider = 0, Policies = 1, Patient = 2, Place = 3, Procedure = 4 }\n    //public OnBallInHoleEvent OnCauseBallSunk;\n\n    public static PhotonView ThisView;\n\n    public int PuzzleNumber => 8;\n    public string Description => \"Gumball machine\";\n\n    #endregion\n\n    #region Puzzle State\n\n    void Awake()\n    {\n        debug = false;\n        ThisView = _photonView;\n    }\n\n    void Start()\n    {\n        // Build queue\n        _causeBallQueue = new Queue<CauseBallData>(_causeBallData);\n\n        // Reset flags\n        _coinAdded = false;\n        _bucketAdded = false;\n\n        // Hole lang select\n        enHoles.SetActive(false);\n        frHoles.SetActive(false);\n        if (_language)\n            enHoles.SetActive(true);\n        else\n            frHoles.SetActive(true);\n\n        // Set-up listeneres\n        //OnCauseBallSunk.AddListener(OnBallSunk);\n        _coinSocket.GetComponent<XRSocketInteractor>().selectEntered.AddListener(CoinAdded);\n        _bucketSocket.GetComponent<XRSocketInteractor>().selectEntered.AddListener(BucketAdded);\n        Debug.Log(\"_BallMachine initialized\");\n    }\n\n    public void ForceComplete()\n    {\n        ThisView.RPC(\"PuzzleComplete_RPC\", RpcTarget.AllBuffered);\n    }\n\n    public static void ForceSpawnBall()\n    {\n        ThisView.RPC(\"RPC_BallComplete\", RpcTarget.All, \"Spawning first ball!\");\n    }\n\n#if UNITY_EDITOR\n    // Debug only\n    void Update()\n    {\n        if (Input.GetKey(KeyCode.LeftAlt) && Input.GetKeyDown(KeyCode.Alpha8) || debug)\n        {\n            _photonView.RPC(\"RPC_BallComplete\", RpcTarget.All, \"Spawning first ball!\");\n            debug = false;\n        }\n    }\n#endif\n    #endregion\n\n    #region BUCKET COIN\n\n    // ======================================\n    // ================ BUCKET ==============\n    // ======================================\n    private void BucketAdded(SelectEnterEventArgs args)\n    {\n        Debug.Log(\"Someone socketed something in bucket slot...  master?\");\n\n        if (!PhotonNetwork.IsMasterClient)\n            return;\n\n        Debug.Log(\"Someone soket something in bucket slot IS MASTER. Socketing \" + args.interactable.gameObject.name);\n\n        if (args.interactable.gameObject != _bucket)\n            return;\n\n        Debug.Log(\"Socketed bucket IS BUCKET. Was added already? \"", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "46983ecc-8875-4a14-9863-2bd5351b77eb": {"__data__": {"id_": "46983ecc-8875-4a14-9863-2bd5351b77eb", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee49b365-740e-4146-bb70-2b24c2940504", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "921dfc40e133b49e760f80bd45726b641a01380b354c76dc94d6afecea82b642"}, "2": {"node_id": "53e4ddd5-9c95-4534-99d8-ae4bffca0574", "node_type": "1", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "5f2017f4b0e6361a94761fc0aee11f8d6f1af0fe098e2b6eaef9032e293d4bf5"}, "3": {"node_id": "0ad3a09e-f390-4ac4-8b66-9412e33d75e5", "node_type": "1", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "ee798765d3535c4367b1daf68d54fe279867caa76522929965addece89daa42d"}}, "hash": "9191d8a63636a1d0dadaa1a0c8054702c99ece6112537c76a7490f329036d1c2", "text": "Was added already? \" + _bucketAdded);\n\n        // Just in case network sync latency/desync\n        if (_bucketAdded)\n            return;\n\n        _photonView.RPC(\"RPC_BucketAddedOthers\", RpcTarget.All);\n\n        Debug.Log(\"Master Client _bucketAdded = true\");\n        _bucketAdded = true;\n    }\n\n    [PunRPC]\n    void RPC_BucketAddedOthers()\n    {\n        // Ensure this doesn't happen twice on the player who socketed it\n        // May be redundant but doesn't hurt\n        Debug.Log(\"Bucket added ALL RPC \");\n        if (_bucketAdded)\n            return;\n        _bucketAdded = true;\n        Debug.Log(\"All Clients _bucketAdded = true\");\n\n        // Disable gumball meshes from the bucket\n        foreach (Transform child in _bucket.transform)\n            child.gameObject.SetActive(false);\n\n        // Show gumballs in the gumball machine's globe\n        _filledGumballs.SetActive(true);\n\n        Debug.Log(\"Filled gumballs in bin\");\n\n        // No more \"gumballs added\" events \n        _bucketSocket.GetComponent<XRSocketInteractor>().selectEntered.RemoveAllListeners();\n\n        Debug.Log(\"_bucketSocket RemovedAllListeners\");\n\n        // Play sound\n        AudioManager.Instance.Play(\"ball bucket\");\n\n        CheckMachineReadiness();\n        Debug.Log(\"Bucket added ALL RPC DONE!\");\n    }\n\n    // ======================================\n    // ================ COIN ================\n    // ======================================\n    private void CoinAdded(SelectEnterEventArgs args)\n    {\n        Debug.Log(\"Someone attempting socket something in coin slot\");\n\n        // if not master client, break out\n        if (!PhotonNetwork.IsMasterClient)\n            return;\n\n        Debug.Log(\"Master attempting socket coin in slot \" + args.interactable.gameObject.name);\n\n        if (IsCoinTag(args.interactable.gameObject) == false)\n            return;\n\n        Debug.Log(\"Is a coin socketed in coin slot! Was added already? \" + _coinAdded.ToString());\n\n        // Ensure this doesn't happen twice on the player who socketed it\n        // May be redundant but doesn't hurt\n        if (_coinAdded)\n            return;\n\n        Debug.Log(\"Is a coin socketed in coin slot! Was added already? \" + _coinAdded.ToString());\n\n        // Disable the coin\n        int objectIDToDisable = args.interactable.gameObject.GetComponent<PhotonView>().ViewID;\n        _photonView.RPC(\"RPC_DisableObjectWithID\", RpcTarget.All, objectIDToDisable);\n\n        // Sync the addition of the coin\n        _photonView.RPC(\"RPC_CoinAddedOthers\", RpcTarget.All);\n\n        CheckMachineReadiness();\n    }\n\n    [PunRPC]\n    void RPC_CoinAddedOthers()\n    {\n        if (_coinAdded)\n            return;\n        _coinAdded = true;\n\n        AudioManager.Instance.Play(\"coin insert\");\n        _coinSocket.DisableInteractions();\n    }\n\n\n    private void CheckMachineReadiness()\n    {\n        string log = \"Checking machine readiness\";\n\n        // Have all ingredients to start the puzzle?\n        if (!_coinAdded)\n        {\n            if (_language)\n                _ballDisplay.text = \"Please insert a coin\";\n            else\n                _ballDisplay.text = \"Veuillez ins\u00e9rer une pi\u00e8ce\";\n\n            VerboseLog(log + \"... coin not added\");\n            return;\n        }\n\n        if (!_bucketAdded)\n        {\n            if (_language)\n                _ballDisplay.text = \"The machine is empty\";\n            else\n                _ballDisplay.text = \"La machine est vide\";\n\n            VerboseLog(log + \"... bucket not added\");\n            return;\n        }\n\n        // Ready to go!\n        VerboseLog(log + \"... ready to go!\");\n        _photonView.RPC(\"RPC_BallComplete\", RpcTarget.All, \"Spawning first ball!\");\n    }\n\n    #endregion\n\n    #region Ball State Handling\n\n    // Whomever detected the sunk ball first will call this method. \n    // CALLED BY THE BALL ITSELF\n    public void OnBallSunk()\n    {\n        VerboseLog(\"OnBallSunk\");\n\n        // Ensure that the master client know that the ball has been sunk so that master client can start the next ball\n        _photonView.RPC(\"RPC_BallComplete\", RpcTarget.All, \" Ball was sunk!\");\n    }\n\n    [PunRPC]\n    [Obsolete]\n    void RPC_BallComplete(string log)\n    {\n        if (!PhotonNetwork.IsMasterClient)\n            return;\n\n        VerboseLog(log + \" RPC_BallComplete running.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ad3a09e-f390-4ac4-8b66-9412e33d75e5": {"__data__": {"id_": "0ad3a09e-f390-4ac4-8b66-9412e33d75e5", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee49b365-740e-4146-bb70-2b24c2940504", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "921dfc40e133b49e760f80bd45726b641a01380b354c76dc94d6afecea82b642"}, "2": {"node_id": "46983ecc-8875-4a14-9863-2bd5351b77eb", "node_type": "1", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "9191d8a63636a1d0dadaa1a0c8054702c99ece6112537c76a7490f329036d1c2"}}, "hash": "ee798765d3535c4367b1daf68d54fe279867caa76522929965addece89daa42d", "text": "\");\n\n        // Destroy the current ball so that no other clients fire the \"ball sunk\" event\n        if (_currentBall != null)\n            PhotonNetwork.Destroy(_currentBall.GetComponent<PhotonView>());\n\n        // Wait a sec before starting the next ball\n        StartCoroutine(WaitAfterBallSunk());\n    }\n\n    // Awaits \"_isNextBallInProgress_master==false\" plus a second delay\n    [Obsolete]\n    IEnumerator WaitAfterBallSunk()\n    {\n        yield return new WaitForSeconds(1f);\n\n        Master_NextBall();\n    }\n\n    // [MASTER CLIENT ONLY] Synchronize the ball data between players\n    [Obsolete]\n    void Master_NextBall()\n    {\n        VerboseLog(\"RPC_NextBall running\");\n\n        // Reset things\n        _ballDisplay.text = \"\";\n        _photonView.RPC(\"RPC_ResetBoard\", RpcTarget.All);\n\n        // Get the next ball from the queue\n        CauseBallData ballData = null;\n        if (_causeBallQueue.Count > 0)\n            ballData = _causeBallQueue.Dequeue();\n\n        // More balls in the queue?\n        if (ballData != null)\n        {\n            VerboseLog(\"Instantiating next ball\");\n\n            // Create a new ball!\n            GameObject newBall = PhotonNetwork.Instantiate(\n                _causeBallPrefab_resource.name,\n                _spawnPoint.position,\n                Quaternion.identity, 0);\n\n            // Update puzzle state to reflect the new ball\n            _currentBall = newBall.GetComponent<CauseBall>();\n\n            // Set the ball's data to the new data \n            _currentBall.SetData(ballData);\n\n            // Update the display text for all\n            _photonView.RPC(\"RPC_SetDisplayText\", RpcTarget.AllBuffered, _currentBall.CauseBallData.Cause);\n\n            return;\n        }\n\n        VerboseLog(\"Determined finished puzzle\");\n\n        // We are done!\n        AudioManager.Instance.Play(\"puzzle end\");\n\n        // Only the master client flags the game is over\n        if (PhotonNetwork.IsMasterClient)\n            _photonView.RPC(\"PuzzleComplete_RPC\", RpcTarget.AllBuffered);\n    }\n\n    [PunRPC]\n    void RPC_SetDisplayText(string text)\n    {\n        _ballDisplay.text = text;\n    }\n\n    #endregion\n\n    #region Various RPCs\n\n    [PunRPC]\n    [Obsolete]\n    void PuzzleComplete_RPC()\n    {\n        VerboseLog(\"PuzzleComplete_RPC running (puzzle 8)\");\n\n        // Enable key for all\n        _key.SetActive(true);\n\n        // Let the controller know we are done\n        Puzzle8Controller.Instance.MazeRotator.ResetBoard();\n        Puzzle8Controller.Instance.OnPuzzle8Completed();\n\n        if (_language)\n            _ballDisplay.text = \"Completed! Retrieve the key and exit.\";\n        else\n            _ballDisplay.text = \"Termin\u00e9! R\u00e9cup\u00e9rez la cl\u00e9 et sortez.\";\n\n        _ballDisplay.color = Color.black;\n        _currentBall.gameObject.SetActive(false);\n    }\n\n    [PunRPC]\n    [Obsolete]\n    void RPC_ResetBoard()\n    {\n        Puzzle8Controller.Instance.MazeRotator.ResetBoard();\n        ResetBallIfExist();\n    }\n\n    public void ResetBallIfExist()\n    {\n        if (_currentBall != null)\n        {\n            _currentBall.GetComponent<Rigidbody>().MovePosition(_spawnPoint.position);\n        }\n    }\n\n    // Eg disable coin once inserted\n    [PunRPC]\n    [Obsolete]\n    void RPC_DisableObjectWithID(int viewID)\n    {\n        PhotonView targetView = PhotonView.Find(viewID);\n\n        if (targetView != null)\n        {\n            //targetView.gameObject.SetActive(false);\n\n            // Disappear it\n            if (targetView.gameObject.GetComponent<MeshRenderer>())\n                targetView.gameObject.GetComponent<MeshRenderer>().enabled = false;\n            //if(targetView.gameObject.GetComponent<Collider>())\n            //    targetView.gameObject.GetComponent <Collider>().enabled = false;\n        }\n        else\n        {\n            Debug.LogWarning(\"No object found with the given ID\");\n        }\n\n        Debug.Log(\"Coin hidden\");\n    }\n\n    bool IsCoinTag(GameObject o)\n    {\n        // Check that the interactable is indeed a \"Coin\"\n        if (o.tag.ToLower().Contains(\"coin\") == false)\n        {\n            Debug.Log(\"Player attempted to socket \" + o.name + \" into the gumball machine... Nope, not allowed\");\n            return false;\n        }\n\n        return true;\n    }\n\n    #endregion\n\n    #region Other\n\n    void VerboseLog(string message)\n    {\n#if VERBOSE_LOGS\n        Debug.Log(message);\n#endif\n    }\n\n    #endregion\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aa70164b-2b61-44c9-adbf-ba023ba16ccb": {"__data__": {"id_": "aa70164b-2b61-44c9-adbf-ba023ba16ccb", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\CauseBall.cs", "creation_date": "2023-10-26", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a24d2f6-8cb1-42d9-88ba-1ccb189974d1", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\CauseBall.cs", "creation_date": "2023-10-26", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "0803de709fb0f97527dbdb53116d5941d2deff324fd8eec2c2cfb9d563d26ad6"}}, "hash": "0803de709fb0f97527dbdb53116d5941d2deff324fd8eec2c2cfb9d563d26ad6", "text": "\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing TMPro;\nusing UnityEngine;\nusing static BallMachine;\n\n// RB refactored this class \npublic class CauseBall : MonoBehaviourPun\n{\n    #region VARIABLES\n\n    [Header(\"READ ONLY\")]\n    [SerializeField] private CauseBallData causeBallData;\n    public CauseBallData CauseBallData => causeBallData;\n\n    private PhotonView PhotonView\n    {\n        get\n        {\n            if (_photonView == null) _photonView = GetComponent<PhotonView>();\n            return _photonView;\n        }\n    }\n    private PhotonView _photonView;\n    private Rigidbody _rb;\n\n    Vector3 _targetSyncPosition; // Provided by master periodically\n    [SerializeField] float _lerpSpeed = 5f;\n    [SerializeField] float _maxSpeedDetected;\n\n    public Event OnSunk;\n\n    bool _hasBeenSunk;\n\n    #endregion\n\n    #region METHODS\n\n    private void Awake()\n    {\n        _rb = GetComponent<Rigidbody>();\n    }\n\n    // Prevent ball from sleeping that occurs due to lack of updates and rigidbody movement\n    private void FixedUpdate()\n    {\n        _rb.WakeUp();\n    }\n\n    // Initialization\n    public void SetData(CauseBallData data)\n    {\n        PhotonView.RPC(\"RPC_InitCauseBall\", RpcTarget.AllBuffered, data.name);\n    }\n\n    // If is a hole, is it correct one\n    private void OnTriggerEnter(Collider other)\n    {\n        if (PhotonNetwork.IsMasterClient == false || _hasBeenSunk)\n            return;\n\n        CauseBallHole hole = other.GetComponent<CauseBallHole>();\n\n        if (hole != null)\n        {\n            string log = \"Ball touched hole: \" + hole.CauseArea.ToString();\n\n            if (causeBallData.IsThisBallsCauseArea(hole.CauseArea))\n            {\n                _hasBeenSunk = true;\n                log += \" (correct)\";\n                BallMachine.Instance.OnBallSunk();\n            }\n\n            Debug.Log(log);\n        }\n    }\n\n    [PunRPC]\n    void RPC_InitCauseBall(string dataAssetName)\n    {\n        causeBallData = Resources.Load(dataAssetName) as CauseBallData;\n        GetComponent<Renderer>().material.color = causeBallData.Color;\n    }\n\n    #endregion\n\n    #region  Deprecated\n\n    // Periodically send out the authoritative position of the ball\n    //IEnumerator SyncBallPosToMaster()\n    //{\n    //    while (true)\n    //    {\n    //        if (PhotonNetwork.IsMasterClient)\n    //        {\n    //            //PhotonView.RPC(\"CorrectBallPosition\", RpcTarget.Others, _rb.position);\n    //            yield return new WaitForSeconds(1f);\n    //        }\n    //    }\n    //}\n\n    // AWAKE\n    // if(PhotonNetwork.IsMasterClient)\n    //     StartCoroutine(SyncBallPosToMaster());\n\n    // FIXED UPDATE\n    // if (!PhotonNetwork.IsMasterClient)\n    //     _rb.MovePosition(Vector3.Lerp(_rb.position, _targetSyncPosition, Time.deltaTime * _lerpSpeed));\n    // if(_rb.velocity.magnitude > _maxSpeedDetected)\n    //     _maxSpeedDetected = _rb.velocity.magnitude;\n\n    // [PunRPC]\n    // // Correct the position to stync with master client\n    // void CorrectBallPosition(Vector3 correctPosition)\n    // {\n    //     _targetSyncPosition = correctPosition;\n    //     // _rb.MovePosition(correctPosition); // Caused clipping\n    // }\n\n    #endregion\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "74babccf-34db-459c-9911-dc06eb093a6c": {"__data__": {"id_": "74babccf-34db-459c-9911-dc06eb093a6c", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\CauseBallData.cs", "creation_date": "2023-10-26", "last_modified_date": "2023-10-26", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05be7642-8e73-45d4-a730-ce1704e3a643", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\CauseBallData.cs", "creation_date": "2023-10-26", "last_modified_date": "2023-10-26", "last_accessed_date": "2023-11-06"}, "hash": "a520e8fa932d155df4fa6ab8c59e468e654aea085448db0c3b1071628bda7ed9"}}, "hash": "a520e8fa932d155df4fa6ab8c59e468e654aea085448db0c3b1071628bda7ed9", "text": "\ufeffusing System;\nusing UnityEngine;\nusing static BallMachine;\n\n[CreateAssetMenu(fileName = \"CauseBallData\", menuName = \"ScriptableObjects/CauseBallData\", order = 1)]\npublic class CauseBallData : ScriptableObject\n{\n    // #### CAUSE DESCRIPTION ####\n\n    [SerializeField] string CauseFr;\n    [SerializeField] string CauseEn;\n    public string Cause\n    {\n        get\n        {\n            if (MainScreenManager.lang == true)\n                return CauseEn;\n            else\n                return CauseFr;\n        }\n    }\n\n\n    // #### CAUSE AREA ####\n\n    // the area that this ball should be sunk into\n    [SerializeField] CauseArea causeArea; \n\n    // returns true if this ball touches the correct area\n    public bool IsThisBallsCauseArea(CauseArea area)\n    {\n        return area == causeArea;\n    }\n\n\n    // #### COLOR ####\n\n    [SerializeField] Color color;\n    public Color Color => color;\n}\n\n#region OLD\n// [Serializable]\n// public class CauseBallData\n// {\n//     bool lang => MainScreenManager.lang;\n//     public string Cause;\n//     public string CauseFr;\n//     public CauseArea CauseArea;\n//     public Color BallColour;\n// \n//     public string getColor()\n//     {\n//         return BallColour.ToString();\n//     }\n// }\n#endregion", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7108a8c8-982b-4269-ab9c-ab81bb1c49e4": {"__data__": {"id_": "7108a8c8-982b-4269-ab9c-ab81bb1c49e4", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\Puzzle8Controller.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "852d1c1c-3fb3-4d06-b6c4-cf4cb05188f0", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\Puzzle8Controller.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}, "hash": "8f2e0ce28a0e8473004935be85dace30573ecfef0878c19b05d24476843e42a0"}}, "hash": "a1df9604cb3bd69903025970604a4118ca3a98c81f0910040c9dd1a9c738b82c", "text": "\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing Photon.Pun;\nusing Photon.Realtime;\nusing UnityEngine;\nusing TMPro;\n\n// Manages completion objects and enables them, and completion of this puzzle\n// Also gives references to other puzzle 8 objects\npublic class Puzzle8Controller : Singleton<Puzzle8Controller>\n{\n    \n    bool lang => MainScreenManager.lang;\n    [SerializeField] private  TextMeshProUGUI _canvas_lang;\n\n    [SerializeField] private BallMachine _ballMachine;\n    [SerializeField] private GameObject _maze;\n\n    [Header(\"Puzzle Completion Barrier Objects\")]\n    [SerializeField] GameObject coins;\n    [SerializeField] GameObject bucket;\n    [SerializeField] GameObject bucketGumballs;\n\n    [SerializeField] GameObject elevatorKey;\n\n    [SerializeField] public bool debug;\n    bool debugAllowed = true;\n\n    [SerializeField] private Canvas _puzzleCompletedCanvas;\n\n    protected override void Awake() \n    {\n        base.Awake();\n        debug = false;\n    }\n\n    void Update()\n    {\n        if (debugAllowed == false) \n            return;\n\n        if (debug || Input.GetKeyDown(KeyCode.Numlock))\n        {\n            debugAllowed = false;\n            EnableBucket();\n            EnableCoins();\n        }\n    }\n\n    public BallMachine BallMachine { get { return _ballMachine; } }\n    AnimCurveRotate mazeRotator;\n    public AnimCurveRotate MazeRotator \n    {\n        get \n        {\n            if (mazeRotator == null)\n                mazeRotator = GetComponentInChildren<AnimCurveRotate>();\n\n            return mazeRotator;\n        }\n    }\n\n    private bool _isCompleted = false;\n    public bool IsCompleted {\n        get { return _isCompleted; }\n    }\n\n    public void OnPuzzle8Completed() {\n        _isCompleted = true;\n\n        if (_puzzleCompletedCanvas)\n            _puzzleCompletedCanvas.gameObject.SetActive(true);\n        else\n            Debug.LogWarning(\"No Puzzle Completed Canvas found for puzzle 8\");\n\n        RoomHintSystem.Instance.CompletePuzzle(8);\n        elevatorKey.SetActive(true);\n        BarrierController.Instance.EnableRoom3();\n    }\n\n    public void Puzzle8ForceComplete()\n    {\n        elevatorKey.SetActive(true);\n         _puzzleCompletedCanvas.gameObject.SetActive(true);\n        OnPuzzle8Completed();\n    }\n\n    public void EnableCoins() {\n        coins.SetActive(true);\n    }\n\n    public void EnableBucket() {\n        bucketGumballs.SetActive(true);\n        bucket.GetComponent<XRGrabNetworkInteractable>().enabled = true;\n    }\n\n    public void DisableCoins() {\n        coins.SetActive(false);\n    }\n\n    public void DisableBucket() {\n        bucket.SetActive(false);\n    }\n\n    public void start(){\n        if (lang){\n            _canvas_lang.text = \"<b>Root cause analysis:</b> Fishbone Congradulation. You were able to appropriately place this \u2018causes\u2019 on a fishbone diagram\";\n        }else{\n            _canvas_lang.text = \"<b>Analyses des causes profondes:</b> Diagramme d'Ishikawa Bravo. Vous avez pu placer correctement ces \u00abcauses\u00bb sur un diagramme d'Ishikawa.\";\n        }\n    }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a7951cd7-6bde-4813-8b3b-4891adcec9cb": {"__data__": {"id_": "a7951cd7-6bde-4813-8b3b-4891adcec9cb", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored Systems 2.txt", "creation_date": "2023-10-24", "last_modified_date": "2023-10-24", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fec03cde-2228-4b58-98b6-9570f6fec4af", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored Systems 2.txt", "creation_date": "2023-10-24", "last_modified_date": "2023-10-24", "last_accessed_date": "2023-11-06"}, "hash": "e71c66ada230d6c54aa3b8a08e187743f2df8dbc62118996b37c0f31a9acdac5"}}, "hash": "e71c66ada230d6c54aa3b8a08e187743f2df8dbc62118996b37c0f31a9acdac5", "text": "1. CauseBall.cs (REFACTORED)\n```csharp\nusing UnityEngine;\n\npublic class CauseBall : MonoBehaviour\n{\n    [SerializeField] private CauseBallData causeBallData;\n\n    public string Cause => causeBallData.Cause;\n    public BallMachine.CauseArea CauseArea => causeBallData.CauseArea;\n    public bool IsInHole { get; set; }\n\n    private Rigidbody rigidbody;\n\n    private void Start()\n    {\n        // Initialize the rigidbody\n        // TODO: Write the code to initialize the rigidbody\n    }\n\n    private void FixedUpdate()\n    {\n        // Wake up the rigidbody\n        // TODO: Write the code to wake up the rigidbody\n    }\n}\n```\n\n2. CauseBallData.cs (REFACTORED)\n```csharp\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"CauseBallData\", menuName = \"ScriptableObjects/CauseBallData\", order = 1)]\npublic class CauseBallData : ScriptableObject\n{\n    public string Cause;\n    public BallMachine.CauseArea CauseArea;\n}\n```\n\n3. BallMachine.cs (REFACTORED)\n```csharp\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit;\n\npublic class BallMachine : MonoBehaviour\n{\n    [SerializeField] private List<CauseBall> causeBalls;\n    [SerializeField] private TextMeshProUGUI ballDisplay;\n    [SerializeField] private Transform spawnTransform;\n    [SerializeField] private GameObject gumballs;\n    [SerializeField] private GameObject key;\n    [SerializeField] private CustomXRSocket coinSlot;\n    [SerializeField] private CustomXRSocket bucketSlot;\n\n    private int _numBallsCompleted;\n    public int totalBalls = 1;\n\n    public string currentColor;\n    public enum CauseArea { Provider = 0, Policies = 1, Patient = 2, Place = 3, Procedure = 4 }\n\n    public OnBallInHoleEvent OnBallInHoleCompleted;\n\n    public CauseBall CurrentBall { get; private set; }\n\n    private void Start()\n    {\n        // Initialize the ball machine\n        // TODO: Write the code to initialize the ball machine\n    }\n\n    private void CoinAdded(SelectEnterEventArgs args)\n    {\n        // Handle the coin added event\n        // TODO: Write the code to handle the coin added event\n    }\n\n    private void BucketAdded(SelectEnterEventArgs args)\n    {\n        // Handle the bucket added event\n        // TODO: Write the code to handle the bucket added event\n    }\n}\n```", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ea9caa70-eff0-42fb-a701-423df347f8ca": {"__data__": {"id_": "ea9caa70-eff0-42fb-a701-423df347f8ca", "embedding": null, "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored Systems.txt", "creation_date": "2023-10-24", "last_modified_date": "2023-10-24", "last_accessed_date": "2023-11-06"}, "excluded_embed_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f41b6859-b179-4f17-bb2a-1c27038accb8", "node_type": "4", "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored Systems.txt", "creation_date": "2023-10-24", "last_modified_date": "2023-10-24", "last_accessed_date": "2023-11-06"}, "hash": "c62d5fc1c7beb2b11b18bad917ee0654c765862ba1cea65b42cb887ea6ee1cdb"}}, "hash": "c62d5fc1c7beb2b11b18bad917ee0654c765862ba1cea65b42cb887ea6ee1cdb", "text": "1. CauseBall.cs (REFACTORED)\n```csharp\nusing UnityEngine;\n\npublic class CauseBall : MonoBehaviour\n{\n    [SerializeField] private CauseBallData causeBallData;\n\n    public string Cause => causeBallData.Cause;\n    public BallMachine.CauseArea CauseArea => causeBallData.CauseArea;\n    public bool IsInHole { get; set; }\n\n    private Rigidbody rigidbody;\n\n    private void Start()\n    {\n        // Initialize the rigidbody\n        // TODO: Write the code to initialize the rigidbody\n    }\n\n    private void FixedUpdate()\n    {\n        // Wake up the rigidbody\n        // TODO: Write the code to wake up the rigidbody\n    }\n}\n```\n\n2. CauseBallData.cs (REFACTORED)\n```csharp\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"CauseBallData\", menuName = \"ScriptableObjects/CauseBallData\", order = 1)]\npublic class CauseBallData : ScriptableObject\n{\n    public string Cause;\n    public BallMachine.CauseArea CauseArea;\n}\n```\n\n3. BallMachine.cs (REFACTORED)\n```csharp\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.XR.Interaction.Toolkit;\n\npublic class BallMachine : MonoBehaviour\n{\n    [SerializeField] private List<CauseBall> causeBalls;\n    [SerializeField] private TextMeshProUGUI ballDisplay;\n    [SerializeField] private Transform spawnTransform;\n    [SerializeField] private GameObject gumballs;\n    [SerializeField] private GameObject key;\n    [SerializeField] private CustomXRSocket coinSlot;\n    [SerializeField] private CustomXRSocket bucketSlot;\n\n    private int _numBallsCompleted;\n    public int totalBalls = 1;\n\n    public string currentColor;\n    public enum CauseArea { Provider = 0, Policies = 1, Patient = 2, Place = 3, Procedure = 4 }\n\n    public OnBallInHoleEvent OnBallInHoleCompleted;\n\n    public CauseBall CurrentBall { get; private set; }\n\n    private void Start()\n    {\n        // Initialize the ball machine\n        // TODO: Write the code to initialize the ball machine\n    }\n\n    private void CoinAdded(SelectEnterEventArgs args)\n    {\n        // Handle the coin added event\n        // TODO: Write the code to handle the coin added event\n    }\n\n    private void BucketAdded(SelectEnterEventArgs args)\n    {\n        // Handle the bucket added event\n        // TODO: Write the code to handle the bucket added event\n    }\n}\n```", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a8230235-c531-421e-ac2b-738ec7a592f5": {"__data__": {"id_": "a8230235-c531-421e-ac2b-738ec7a592f5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae", "node_type": null, "metadata": {}, "hash": null}}, "hash": "2888773f51fd4950d702b5f03ec05b6d5e2cb449112ffd0ab869f68f83250fdb", "text": " Class Definition: AnimCurveRotate is a MonoBehaviour script that controls the movement of a maze in a 3D game using transform and not rigidbody. It inherits from MonoBehaviour.\n\nClass Role: The script's functionality is to control the rotation of the maze based on user input from a keypad or keyboard. It uses Photon RPC calls to communicate with other objects in the scene, such as the Puzzle8Controller.\n\nFeatures: The script implements an AnimCurveRotate class that defines how the speed increases between 0 seconds and lerpTime when pressing a button. It also uses Coroutines to control the rotation of the maze. Additionally, it uses Photon RPC calls to communicate with other objects in the scene, such as the Puzzle8Controller.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fb99377d-3b25-4c8b-9cb4-6c18c8c9d14d": {"__data__": {"id_": "fb99377d-3b25-4c8b-9cb4-6c18c8c9d14d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ea911bf-3783-4e24-acf9-7d4dfa83d011", "node_type": null, "metadata": {}, "hash": null}}, "hash": "b214a125169bd73bb52825167786f3117330a7c181ca149f142f241af08a3872", "text": " Class Definition: CauseBallHole is a MonoBehaviour script that extends the base class MonoBehaviour and does not implement any interfaces.\n\nClass Role: The CauseBallHole script is responsible for detecting collisions between the ball and the cause area, and triggering the corresponding event when the ball falls into the hole. It also manages the state of the ball by setting its IsInHole property to true when it enters the hole.\n\nFeatures: The CauseBallHole script uses Photon RPC calls to communicate with other objects in the scene, specifically the Puzzle8Controller object. When a collision is detected, it invokes the OnBallInHoleCompleted event on the BallMachine object, which is also managed by the Puzzle8Controller object.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0c7d0780-a0d4-4447-9040-a9a9c650be40": {"__data__": {"id_": "0c7d0780-a0d4-4447-9040-a9a9c650be40", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "44da00bf-d560-429e-944f-ae8f87f92a53", "node_type": null, "metadata": {}, "hash": null}}, "hash": "29f468a1731f50e940da8d892313675bf1bb3f1f15419cba2af5241f27bc1ed6", "text": " Class Definition: KeyPressTilt is a MonoBehaviourPun class that inherits from the base MonoBehaviour class and implements the Photon.Pun namespace.\n\nClass Role: The KeyPressTilt class serves as a trigger area that synchronizes and sends key inputs to the Puzzle8Controller's MazeRotator component. It listens for collisions with colliders containing text components, which represent keys. When a collision occurs, it checks if the text component has a single character and sends the key input to the server using Photon RPC.\n\nFeatures: The KeyPressTilt class uses Photon RPC calls to update the maze input on the server. It also includes two methods, OnTriggerEnter and OnTriggerExit, which handle collisions with keys and remove them from the maze input when they exit the trigger area.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5f54d13f-d3bd-4f64-af39-34184bbc68fd": {"__data__": {"id_": "5f54d13f-d3bd-4f64-af39-34184bbc68fd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ee49b365-740e-4146-bb70-2b24c2940504", "node_type": null, "metadata": {}, "hash": null}}, "hash": "d660156a50464b8f8df17a45739ed81d4680e7274e06cf2b8b6587cdea4c4b32", "text": " Class Definition: Name, base class, and interfaces (if applicable).\n---------------------------------------------------------------\nClass Name: BallMachine\nBase Class: MonoBehaviour\nInterfaces: IPunObservable\n\nClass Role: The BallMachine class is a MonoBehaviourPun and IPuzzleDebug script in Unity that manages the balls and sockets for a puzzle game. It handles tasks such as waiting for the next ball to be sunk, synchronizing the ball data between players, and setting the display text for all clients. The class also has Photon RPC calls such as RPC_BallComplete and PuzzleComplete_RPC.\n\nFeatures: The BallMachine class uses Photon Networking to create a multiplayer game and implements the IPunObservable interface to receive Photon events. It has several public methods, private methods, and public events that handle various tasks such as ForceComplete(), ForceSpawnBall(), BucketAdded(), CoinAdded(), OnCoinAdded, and OnBucketAdded. The class also uses a list of CauseBallData to manage the balls and sockets for the puzzle game.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2e0d65dd-558c-4659-a933-4318f9409c39": {"__data__": {"id_": "2e0d65dd-558c-4659-a933-4318f9409c39", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9a24d2f6-8cb1-42d9-88ba-1ccb189974d1", "node_type": null, "metadata": {}, "hash": null}}, "hash": "bf67e5639c810db6ca30d462aa6f67d86955e512e0d7f0bd57fcde2c4d05bfd8", "text": " The given code is for a Unity class named \"CauseBall\" that inherits from MonoBehaviourPun and implements the CauseBallData interface. The class's role is to handle the behavior of a ball in an escape room game, including detecting when it touches a hole and sinking. It also has features such as Photon RPC calls for initializing the cause ball data and syncing its position with the master client. Additionally, it uses the BallMachine class for managing the overall game state.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1bf5f82a-f89d-47ab-8153-df709c80d5be": {"__data__": {"id_": "1bf5f82a-f89d-47ab-8153-df709c80d5be", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "05be7642-8e73-45d4-a730-ce1704e3a643", "node_type": null, "metadata": {}, "hash": null}}, "hash": "b44921f45829b1ce030847b5ce76b96e500143d2b2edcb4255b0c82d6d02fba0", "text": " Class Definition: CauseBallData is a public class that inherits from ScriptableObject and implements no interfaces.\n\nClass Role: The CauseBallData class represents a cause ball in the escape room game. It contains information about the cause of the ball, such as its description and area, as well as its color. The class also provides methods for checking if a ball touches the correct area and getting the color of the ball.\n\nFeatures: The CauseBallData class uses the [SerializeField] attribute to serialize the fields CauseFr and CauseEn, which allows them to be saved and loaded from a file. Additionally, the class uses the public getter property to provide access to the Cause field, which returns either the English or French cause description based on the language setting in the MainScreenManager.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48d252d7-4404-4d6a-bf9a-9cdb81055101": {"__data__": {"id_": "48d252d7-4404-4d6a-bf9a-9cdb81055101", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "852d1c1c-3fb3-4d06-b6c4-cf4cb05188f0", "node_type": null, "metadata": {}, "hash": null}}, "hash": "6e61cbdecaaa4b1a65ce1b10ffe7fe542293df78e217a9f4f2a1347d1509488d", "text": " Class Definition: Puzzle8Controller\nBase Class: Singleton<Puzzle8Controller>\nInterfaces: None\n\nClass Role: The Puzzle8Controller class manages completion objects and enables them for puzzle 8. It also provides references to other puzzle 8 objects, such as the ball machine, maze, coins, bucket, bucketGumballs, elevator key, and puzzle completed canvas. Additionally, it has methods to enable/disable coins and bucket, start the puzzle, and force complete the puzzle.\n\nFeatures: The class uses Photon RPC calls to enable completion objects when a specific key is pressed or when the puzzle is forced to complete.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "379848e3-27af-4de6-b2f7-6a3e4d6d7cb1": {"__data__": {"id_": "379848e3-27af-4de6-b2f7-6a3e4d6d7cb1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fec03cde-2228-4b58-98b6-9570f6fec4af", "node_type": null, "metadata": {}, "hash": null}}, "hash": "207efcf77d80b70e8c45277e3a52e95585544bfa5546081664e74b5d1dcae308", "text": " Class Definition: CauseBall.cs (REFACTORED)\n\nClass Role: The CauseBall class is a MonoBehaviour that represents a ball in the escape room game. It has properties for the cause of the ball, its area within the ball machine, and whether it is currently in the hole or not. It also has methods to initialize the rigidbody and wake up the rigidbody.\n\nFeatures: None mentioned.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0cdb1911-1474-43b3-8e55-d9386b503712": {"__data__": {"id_": "0cdb1911-1474-43b3-8e55-d9386b503712", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f41b6859-b179-4f17-bb2a-1c27038accb8", "node_type": null, "metadata": {}, "hash": null}}, "hash": "d32259460955d899f2e9b796efaecbf30c7222488e145c4d7f87ca3e11e76cba", "text": " Class Definition: CauseBall.cs\nBase Class: MonoBehaviour\nInterfaces (if applicable): None\n\nClass Role: The CauseBall class is a scriptable object that represents a ball in the Escape Room game. It has properties for the cause of the ball, its area within the Ball Machine, and whether it is currently in the hole or not. It also has methods to initialize the rigidbody and wake up the rigidbody.\n\nFeatures: None", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"ec10ffb0-d38d-4d2c-b8d2-9561234cb8ae": {"node_ids": ["8344f830-a280-4a0a-8f85-3abb7a60c76c", "852c31fd-bbba-4d35-a0a0-932d2422a09c", "a8230235-c531-421e-ac2b-738ec7a592f5"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\AnimCurveRotate.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}}, "3ea911bf-3783-4e24-acf9-7d4dfa83d011": {"node_ids": ["12833706-ef4d-49af-805b-5777d0276247", "fb99377d-3b25-4c8b-9cb4-6c18c8c9d14d"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\CauseBallHole.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}}, "44da00bf-d560-429e-944f-ae8f87f92a53": {"node_ids": ["5c04af5c-b9b0-43c4-806f-2dc541998bbd", "0c7d0780-a0d4-4447-9040-a9a9c650be40"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\KeyPressTilt.cs", "creation_date": "2023-09-30", "last_modified_date": "2023-10-25", "last_accessed_date": "2023-11-06"}}, "ee49b365-740e-4146-bb70-2b24c2940504": {"node_ids": ["53e4ddd5-9c95-4534-99d8-ae4bffca0574", "46983ecc-8875-4a14-9863-2bd5351b77eb", "0ad3a09e-f390-4ac4-8b66-9412e33d75e5", "5f54d13f-d3bd-4f64-af39-34184bbc68fd"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\BallMachine.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}}, "9a24d2f6-8cb1-42d9-88ba-1ccb189974d1": {"node_ids": ["aa70164b-2b61-44c9-adbf-ba023ba16ccb", "2e0d65dd-558c-4659-a933-4318f9409c39"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\CauseBall.cs", "creation_date": "2023-10-26", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}}, "05be7642-8e73-45d4-a730-ce1704e3a643": {"node_ids": ["74babccf-34db-459c-9911-dc06eb093a6c", "1bf5f82a-f89d-47ab-8153-df709c80d5be"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\CauseBallData.cs", "creation_date": "2023-10-26", "last_modified_date": "2023-10-26", "last_accessed_date": "2023-11-06"}}, "852d1c1c-3fb3-4d06-b6c4-cf4cb05188f0": {"node_ids": ["7108a8c8-982b-4269-ab9c-ab81bb1c49e4", "48d252d7-4404-4d6a-bf9a-9cdb81055101"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored code\\Puzzle8Controller.cs", "creation_date": "2023-10-30", "last_modified_date": "2023-10-30", "last_accessed_date": "2023-11-06"}}, "fec03cde-2228-4b58-98b6-9570f6fec4af": {"node_ids": ["a7951cd7-6bde-4813-8b3b-4891adcec9cb", "379848e3-27af-4de6-b2f7-6a3e4d6d7cb1"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored Systems 2.txt", "creation_date": "2023-10-24", "last_modified_date": "2023-10-24", "last_accessed_date": "2023-11-06"}}, "f41b6859-b179-4f17-bb2a-1c27038accb8": {"node_ids": ["ea9caa70-eff0-42fb-a701-423df347f8ca", "0cdb1911-1474-43b3-8e55-d9386b503712"], "metadata": {"file_path": "D:\\Git\\EscapeRoom3DGitLab\\Assets\\Scripts\\Puzzle 8\\Refactored Systems.txt", "creation_date": "2023-10-24", "last_modified_date": "2023-10-24", "last_accessed_date": "2023-11-06"}}}}